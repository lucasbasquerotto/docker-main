{% macro include(name, include_params) %}
{% set type = include_params.type %}
{% set params = include_params.params %}

### include - {{ (name != type) | ternary(name + ' (' + type + ')', type) }} - start ###

{% if type == 'file_upload' %}

proxy_read_timeout         {{ params.proxy_read_timeout }};
client_max_body_size       {{ params.client_max_body_size }};

{% elif type == 'geo_whitelist' %}

geo $whitelist {
  {% for item in params.block_files %}
  include {{ item }};
  {% endfor %}
  default 1;
}

{% elif type == 'limit_conn_zone' %}

limit_conn_zone $binary_remote_addr zone={{ params.zone }}:{{ params.size }};

{% elif type == 'limit_req_zone' %}

limit_req_zone $binary_remote_addr zone={{ params.zone }}:{{ params.size }} rate={{ params.rate }};

{% elif type == 'log' %}

log_format main '{{ params.format }}';
access_log /dev/stdout main; # if=$whitelist;	
error_log /dev/stderr;

{% elif type == 'proxy_cache' %}

proxy_cache_path {{ params.proxy_cache_path }} levels={{ params.levels }}{{ '' 
}} keys_zone={{ params.keys_zone }}:{{ params.size }}{{ '' 
}} max_size={{ params.max_size }} inactive={{ params.inactive }};

{% elif type == 'ratelimit' %}

{% if params.limit_req is defined %}
limit_req zone={{ params.limit_req.zone }} burst={{ params.limit_req.burst }} {{ params.limit_req.nodelay | ternary('nodelay', '') }};
{% endif %}  
{% if params.limit_conn is defined %}
limit_conn {{ params.limit_conn.name }} {{ params.limit_conn.value }};
{% endif %}  

{% elif type == 'timeouts' %}

proxy_connect_timeout  {{ params.proxy_connect_timeout }};
proxy_send_timeout     {{ params.proxy_send_timeout }};
proxy_read_timeout     {{ params.proxy_read_timeout }};
send_timeout           {{ params.send_timeout }};
client_body_timeout    {{ params.client_body_timeout }};
client_header_timeout  {{ params.client_header_timeout }};

{% else %}

### UNKNOW TYPE ###

{% endif %}

### include - {{ (name != type) | ternary(name + ' (' + type + ')', type) }} - end ###

{% endmacro %}

worker_processes {{ params.worker_processes }};

events {
  worker_connections {{ params.worker_connections }};
}

http {
  {% for item in params.includes %}
  {{ include(item, params.includes_dict[item]) | indent(2) }}
  {% endfor %}
  
  {% for item in params.servers %}

  ### server - {{ item.name }} - start ###

  {% if item.redirect is not defined %}

  upstream upstream-{{ item.name }}-{{ item.port }} {
    server {{ item.name }}:{{ item.upstream.port | default('80', true) }};
  }  

  {% endif %}

  server {
    server_name {{ item.host }};

    listen {{ item.port | default('80', true) }} {{ 
      (item.ssl | default(false) | bool) | ternary('ssl', '', true) 
    }};

    {% if (item.ssl | default(false) | bool) %}

    ssl on;
    ssl_certificate /etc/ssl/{{ item.ssl }}.crt;
    ssl_certificate_key /etc/ssl/{{ item.ssl }}.key;

    {% endif %}

    {% if item.includes is defined %}

    {% for subitem in item.includes %}
    {{ include(subitem, params.includes_dict[subitem]) | indent(4) }}
    {% endfor %}

    {% endif %}

    {% if item.redirect is defined %}

    return 301 {{ item.redirect.protocol }}://{{ item.redirect.host }}{{
      ((item.redirect.port != '80') and (item.redirect.port != '443'))
      | ternary(':' + item.redirect.port, '')
    }}$request_uri;

    {% else %} 

    {% for item_inner in item.locations %}  

    ### location - {{ item_inner.path }} - start ###

    location {{ item_inner.path }} {
      {% if item_inner.includes is defined %}

      {% for subitem in item_inner.includes %}  

      {{ include(subitem, params.includes_dict[subitem]) | indent(6) }}

      {% endfor %}

      {% endif %} 

      proxy_pass         {{ item.upstream.protocol 
        | default('http', true) }}://upstream-{{ item.name }}-{{ item.port }};
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    ### location - {{ item_inner.path }} - end ###

    {% endfor %}
    
    {% endif %}    
  }

  ### server - {{ item.name }} - end ###

  {% endfor %}
}
