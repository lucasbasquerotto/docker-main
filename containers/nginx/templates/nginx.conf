{% macro include(name, include_params) %}
{% set type = include_params.type %}
{% set params = include_params.params %}

### include - {{ (name != type) | ternary(name + ' (' + type + ')', type) }} - start ###

{% if type == 'file_upload' %}

proxy_read_timeout         {{ params.proxy_read_timeout }};
client_max_body_size       {{ params.client_max_body_size }};

{% elif type == 'geo_whitelist' %}

geo $whitelist {
  {% for item in params.block_files %}
  include {{ item }};
  {% endfor %}
  default 1;
}

{% elif type == 'limit_conn_zone' %}

limit_conn_zone $binary_remote_addr zone={{ params.zone }}:{{ params.size }};

{% elif type == 'limit_req_zone' %}

limit_req_zone $binary_remote_addr zone={{ params.zone }}:{{ params.size }} rate={{ params.rate }};

{% elif type == 'log' %}

log_format main '{{ params.format }}';
access_log /dev/stdout main; # if=$whitelist;	
error_log /dev/stderr;

{% elif type == 'proxy_cache' %}

proxy_cache_path {{ params.proxy_cache_path }} levels={{ params.levels }}{{ '' 
}} keys_zone={{ params.keys_zone }}:{{ params.size }}{{ '' 
}} max_size={{ params.max_size }} inactive={{ params.inactive }};

{% elif type == 'ratelimit' %}

{% if params.limit_req is defined %}
limit_req zone={{ params.limit_req.zone }} burst={{ params.limit_req.burst }} {{ params.limit_req.nodelay | ternary('nodelay', '') }};
{% endif %}  
{% if params.limit_conn is defined %}
limit_conn {{ params.limit_conn.name }} {{ params.limit_conn.value }};
{% endif %}  

{% elif type == 'timeouts' %}

proxy_connect_timeout  {{ params.proxy_connect_timeout }};
proxy_send_timeout     {{ params.proxy_send_timeout }};
proxy_read_timeout     {{ params.proxy_read_timeout }};
send_timeout           {{ params.send_timeout }};
client_body_timeout    {{ params.client_body_timeout }};
client_header_timeout  {{ params.client_header_timeout }};

{% else %}

### UNKNOW TYPE ###

{% endif %}

### include - {{ (name != type) | ternary(name + ' (' + type + ')', type) }} - end ###

{% endmacro %}

worker_processes {{ params.worker_processes }};

events {
  worker_connections {{ params.worker_connections }};
}

http {
  {% for item in params.includes %}
  {{ include(item, params.includes_dict[item]) | indent(2) }}
  {% endfor %}
  
  {% set vars_domains_dict = params.vars_dict.domains_dict %}
  {% set vars_servers_dict = params.vars_dict.servers_dict %}
  {% set vars_upstreams_dict = params.vars_dict.upstreams_dict %}

  {% for item in params.servers %}

  {% set var_server = params.servers_dict[item] %}
  {% set var_service_name = var_server.service %}
  {% set var_domain = vars_domains_dict[var_service_name].domain %}
  {% set var_server_ssl = vars_servers_dict[var_service_name].ssl | default(false) %}
  {% set var_server_port = vars_servers_dict[var_service_name].port 
    | default(var_server_ssl | bool | ternary('443', '80')) 
  %}
  {% set var_server_external_port = vars_servers_dict[var_service_name].external_port 
    | default(var_server_port) | default('80', true) 
  %}
  {% set var_protocol = var_server_ssl | bool | ternary('https', 'http') %}
  {% set var_upstream_ssl = vars_upstreams_dict[var_service_name].ssl | default(false) %}
  {% set var_upstream_port = vars_upstreams_dict[var_service_name].port | default('80', true) %}
  {% set var_upstream_protocol = var_upstream_ssl | bool | ternary('https', 'http') %}

  ### server - {{ var_service_name }} - start ###

  {% if var_server.upstream | default(false) | bool %}

  upstream upstream-{{ var_service_name }}-{{ var_server_port }} {
    server {{ var_service_name }}:{{ var_upstream_port }};
  }

  {% endif %}

  server {
    server_name {{ ((var_server.subdomain | default('')) != '') 
      | ternary(var_server.subdomain + '.', '') }}{{ var_domain }};

    listen {{ var_server_port }} {{ var_server_ssl | bool | ternary('ssl', '', true) }};

    {% if var_server_ssl | bool %}

    ssl on;
    ssl_certificate /etc/ssl/{{ var_server.ssl_filename }}.crt;
    ssl_certificate_key /etc/ssl/{{ var_server.ssl_filename }}.key;

    {% endif %}

    {% if var_server.includes is defined %}

    {% for subitem in var_server.includes %}
    {{ include(subitem, params.includes_dict[subitem]) | indent(4) }}
    {% endfor %}

    {% endif %}

    {% if (var_server.redirect | default('')) != '' %}

    return 301 {{ var_protocol }}://{{ var_domain }}{{
      (not (var_server_external_port in ['80', '443']))
      | ternary(':' + var_server_external_port, '')
    }}$request_uri;

    {% else %} 

    {% for item_inner in var_server.locations %}  

    ### location - {{ item_inner.path }} - start ###

    location {{ item_inner.path }} {
      {% if item_inner.includes is defined %}

      {% for subitem in item_inner.includes %}  

      {{ include(subitem, params.includes_dict[subitem]) | indent(6) }}

      {% endfor %}

      {% endif %} 

      proxy_pass         {{ var_upstream_protocol 
        }}://upstream-{{ var_service_name }}-{{ var_server_port }};
      proxy_redirect     off;

      proxy_set_header   Host                $host:{{ var_server_external_port }};
      proxy_set_header   X-Real-IP           $remote_addr;
      proxy_set_header   X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host    $server_name;
      proxy_set_header   X-Forwarded-Proto   $scheme;
      proxy_set_header   X-Forwarded-Port    {{ var_server_external_port }};
    }

    ### location - {{ item_inner.path }} - end ###

    {% endfor %}
    
    {% endif %}    
  }

  ### server - {{ var_service_name }} - end ###

  {% endfor %}
}
