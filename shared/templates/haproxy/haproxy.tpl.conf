{% set var_global_main_domain = params.main_domain | default([]) %}
{% set var_global_conf = params.conf | default({}) %}
{% set var_global_ports = params.ports | default({}) %}
{% set var_global_domains = params.domains | default({}) %}
{% set var_global_node_dependencies = params.dependencies | default({}) %}
{% set var_global_services = params.services | default([]) %}

{% set var_global_ssl = var_global_conf.ssl | default(false) %}
{% set var_global_public_http_port = var_global_ports.public_http_port | default(false) %}
{% set var_global_public_https_port = var_global_ports.public_https_port | default(false) %}
{% set var_global_private_http_port = var_global_ports.private_http_port | default(false) %}
{% set var_global_private_https_port = var_global_ports.private_https_port | default(false) %}

{% set ns_internal_port = namespace(next=10000) %}

{################################################################################################}
{% macro include_service(args) %}

	{% set var_arg_name = args.name | default('') %}
	{% set var_arg_domain = args.domain | default('') %}
	{% set var_arg_endpoint = args.endpoint | default('') %}
	{% set var_arg_service = args.service | default('') %}
	{% set var_arg_ssl = args.ssl | default(false) %}
	{% set var_arg_upgrade = args.upgrade | default(false) %}
	{% set var_arg_private = args.private | default(false) %}
	{% set var_arg_use_basic_auth = args.use_basic_auth | default(false) %}
	{% set var_arg_remove_auth = args.remove_auth | default(false) %}
	{% set var_arg_basic_auth_file = args.basic_auth_file | default('') %}
	{% set var_arg_validate_origin = args.validate_origin | default(false) %}
	{% set var_arg_locations = args.locations | default([]) %}
	{% set var_arg_proxy = args.proxy | default(false) %}
	{% set var_arg_domain_name = args.domain_name | default('') %}
	{% set var_arg_dependency_name = args.dependency_name | default('') %}
	{% set var_arg_upstream_data = args.upstream_data | default('') %}
	{% set var_arg_upstream_args = args.upstream_args | default('') %}

	{% set var_domain = args.domain | default('') %}

	{################################################################################################}
	{% if var_domain == '' %}

	{% set var_domain =
		var_global_domains[
			var_arg_domain_name | default(var_arg_name, true)
		] | default('')
	%}

	{################################################################################################}
	{% if var_domain == '' %}

		{% set error = {} %}
		{{ error['domain.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{% set var_endpoints = args.endpoint | default('') %}

	{################################################################################################}
	{% if var_endpoints == '' %}

	{% set var_endpoints =
		var_global_node_dependencies[
			var_arg_dependency_name | default(var_arg_name, true)
		].host_list | default('')
	%}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_endpoints is string %}

	{% set var_endpoints = [var_endpoints] | reject('equalto', '') | list %}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if ((var_endpoints | length) == 0) and (var_arg_proxy | bool) %}

	{% set error = {} %}
	{{ error['endpoint.with.proxy.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% set var_proxy_endpoint = var_endpoints[0] | default('') %}
	{% set var_resolve = true %}
	{% set var_upstream_name = 'upstream-' + var_arg_name %}

	{% set var_ssl = args.ssl | default(var_global_ssl) %}
	{% set var_protocol = var_ssl | bool | ternary('https', 'http') %}
	{% set var_http_port = var_arg_private | bool | ternary('9080', '80') %}
	{% set var_https_port = var_arg_private | bool | ternary('9443', '443') %}
	{% set var_listen =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary('9443 ssl', '9080'),
			var_ssl | bool | ternary('443 ssl', '80')
		)
	%}
	{% set var_external_port =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary(var_global_private_https_port, var_global_private_http_port),
			var_ssl | bool | ternary(var_global_public_https_port, var_global_public_http_port)
		)
	%}
	{% set var_port_suffix =
		(var_external_port in ('80', '443'))
		| ternary('', ':' + var_external_port)
	%}
	{% set var_use_basic_auth =
		var_global_conf.disable_basic_auth | default(false) | bool
		| ternary(false, args.use_basic_auth | default(var_arg_private))
	%}
	{% set var_basic_auth_file =
		(var_use_basic_auth | bool)
		| ternary(args.basic_auth_file | default('auth/.htpasswd'), '')
	%}
	{% set var_validate_origin =
		var_global_conf.disable_origin_validation | default(false) | bool
		| ternary(false, args.validate_origin | default(var_arg_private))
	%}

	{% set var_location_info_list = args.locations | default('/') %}

	{% set var_location_info_list =
		(
			(var_location_info_list is iterable)
			and
			(var_location_info_list is not mapping)
			and
			(var_location_info_list is not string)
		)
		| ternary(var_location_info_list, [var_location_info_list])
	%}

	{{
		include_service_aux({
			'name': var_arg_name,
			'upgrade': var_arg_upgrade,
			'private': var_arg_private,
			'remove_auth': var_arg_remove_auth,
			'upstream_data': var_arg_upstream_data,
			'upstream_args': var_arg_upstream_args,

			'domain': var_domain,
			'proxy_endpoint': var_proxy_endpoint,
			'endpoints': var_endpoints,
			'upstream_name': var_upstream_name,
			'upstreams': ns_upstream.list,
			'resolve': var_resolve,
			'ssl': var_ssl,
			'protocol': var_protocol,
			'http_port': var_http_port,
			'https_port': var_https_port,
			'listen': var_listen,
			'external_port': var_external_port,
			'port_suffix': var_port_suffix,
			'use_basic_auth': var_use_basic_auth,
			'basic_auth_file': var_basic_auth_file,
			'validate_origin': var_validate_origin,

			'location_info_list': var_location_info_list
		})
	}}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_service_aux(args) %}

	### [service] {{ args.name }} - start ###

	{################################################################################################}
	{% for upstream in args.upstreams %}

	### [upstream] {{ args.name }} ({{ loop.index }}) ###

	server {
		{{ include_upstream_server_info(args, upstream) }}
	}

	{% endfor %}
	{################################################################################################}

	{################################################################################################}
	{% if args.private | bool %}

	### listen to port 80 to generate SSL certificates ###

	#original frontend, redirect all non SSL to SSL
	frontend unsecured-in
		bind *:80
		redirect scheme https code 301 if !use_certbot !{ ssl_fc }

	#new frontend, same as above, but route certbot renewals accordingly
	frontend unsecured-in
		bind *:80
		acl use_certbot path_beg /.well-known
		use_backend certbot if use_certbot
		redirect scheme https code 301 if !use_certbot !{ ssl_fc }

	# new backend for static webserver
	backend certbot
		server nginx 127.0.0.1:8080

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.domain == var_global_main_domain %}

	### [service] {{ args.name }} - redirect (www) ###
	### from: www.{{ args.domain }}:{{ args.external_port }} ###
	### to: {{ args.domain }}:{{ args.external_port }} ###

	server {
		{{
			include_server_info({
				'name': args.name,
				'domain': 'www.' + args.domain,
				'protocol': 'http',
				'listen': args.http_port,
				'port_suffix': args.port_suffix,
				'ssl': false,
				'private': args.private,
				'use_basic_auth': false,
				'basic_auth_file': '',
				'validate_origin': false
			})
		}}
		{{ include_redirect(args) }}
	}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.ssl | bool %}

	### [service] {{ args.name }} - redirect (http to https) ###
	### from: {{ args.domain }}:{{ args.external_port }} ###
	### to: {{ args.domain }}:{{ args.external_port }} ###

	server {
		{{
			include_server_info({
				'name': args.name,
				'domain': args.domain,
				'protocol': 'http',
				'listen': args.http_port,
				'port_suffix': args.port_suffix,
				'ssl': false,
				'private': args.private,
				'use_basic_auth': false,
				'basic_auth_file': '',
				'validate_origin': false
			})
		}}
		{{ include_redirect(args) }}
	}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if (args.ssl | bool) and (args.domain == var_global_main_domain) %}

	### [service] {{ args.name }} - redirect (www https) ###
	### from: www.{{ args.domain }}:{{ args.external_port }} ###
	### to: {{ args.domain }}:{{ args.external_port }} ###

	server {
		{{
			include_server_info({
				'name': args.name,
				'domain': 'www.' + args.domain,
				'protocol': args.protocol,
				'listen': args.listen,
				'port_suffix': args.port_suffix,
				'ssl': args.ssl,
				'private': args.private,
				'use_basic_auth': false,
				'basic_auth_file': '',
				'validate_origin': false
			})
		}}
		{{ include_redirect(args) }}
	}

	{% endif %}
	{################################################################################################}

	### [service] {{ args.name }} - main configuration ###

	server {
		{{
			include_server_info({
				'name': args.name,
				'domain': args.domain,
				'protocol': args.protocol,
				'listen': args.listen,
				'port_suffix': args.port_suffix,
				'ssl': args.ssl,
				'private': args.private,
				'use_basic_auth': args.use_basic_auth,
				'basic_auth_file': args.basic_auth_file,
				'validate_origin': args.validate_origin
			})
		}}

		{################################################################################################}
		{% for location_info in args.location_info_list %}

		{% set var_location_info =
			(location_info is string)
			| ternary({ 'location': location_info }, location_info)
		%}

		{% set var_location_list = var_location_info.location | default([]) %}

		{% set var_location_list =
			(
				(var_location_list is iterable)
				and
				(var_location_list is not mapping)
				and
				(var_location_list is not string)
			)
			| ternary(var_location_list, [var_location_list])
		%}

		{################################################################################################}
		{% for location in var_location_list %}

		location {{ location }} {

			{################################################################################################}
			{% if var_location_info.allow_origin | default(false) | bool %}

			{{ include_allow_origin(var_location_info.allow_origin_args | default({})) }}

			{% endif %}
			{################################################################################################}

			{################################################################################################}
			{% if (var_location_info.data | default('')) == '' %}

			{{ include_proxy_location_info(args) }}

			{% else %}

			{################################################################################################}
			{% if var_location_info.proxy | default(false) | bool %}

			{{ include_proxy_location_info(args) }}

			{% endif %}
			{################################################################################################}

			{################################################################################################}
			{% for line in var_location_info.data.split('\n') %}

			{{ line | trim }}

			{% endfor %}
			{################################################################################################}

			{% endif %}
			{################################################################################################}

		}

		{% endfor %}
		{################################################################################################}

		{% endfor %}
		{################################################################################################}

	}

	### [service] {{ args.name }} - end ###

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_server_info(args) %}

		server_name            {{ args.domain }};
		listen                 {{ args.listen }};
		server_tokens          off;

		{################################################################################################}
		{% if args.use_basic_auth | bool %}

		auth_basic             "Administrator’s Area";
		auth_basic_user_file   {{ args.basic_auth_file }};

		{% endif %}
		{################################################################################################}

		{################################################################################################}
		{% if args.validate_origin %}

		set $my_origin         "{{ args.protocol }}://{{ args.domain }}{{ args.port_suffix }}";
		include                include/validate-origin.conf;

		{% endif %}
		{################################################################################################}

		{################################################################################################}
		{% if args.ssl | bool %}

		{{ include_ssl() }}

		{% endif %}
		{################################################################################################}

		{################################################################################################}
		{% if not (args.private | bool) %}

		### [blacklists] {{ args.name }} ###

		if ( $ip_blacklist = 1 ) {
				return 403;
		}
		if ( $ua_blacklist = 1 ) {
				return 403;
		}

		{% endif %}
		{################################################################################################}

		### [locations] {{ args.name }} ###

		{################################################################################################}
		{% if (args.listen | string) == '80' %}

		location /.well-known/acme-challenge/ {
			root /var/www/certbot;
		}

		{% endif %}
		{################################################################################################}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_upstream_server_info(args, arg_upstream) %}

		listen                 {{ arg_upstream.listen }};

		### [locations] {{ args.name }} (upstream) ###

		location / {

			{% set var_new_args = { 'proxy_endpoint': arg_upstream.endpoint, 'resolve': true } %}

			{{ include_proxy_location_info(args | combine(var_new_args)) }}

		}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_redirect(args) %}

		location / {
			return 301 {{ args.protocol }}://{{ args.domain }}{{ args.port_suffix }}$request_uri;
		}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_proxy_location_info(args) %}

			{################################################################################################}
			{% if args.proxy_endpoint != '' %}

			{################################################################################################}
			{% if args.resolve | bool %}

			resolver                 {{ var_global_conf.resolver | default('127.0.0.11', true) }}{{ ''
			}} valid={{ var_global_conf.resolver_time | default('30s', true) }};

			set $var_proxy           {{ args.proxy_endpoint }};
			proxy_pass               $var_proxy;

			{% else %}

			proxy_pass               {{ args.proxy_endpoint }};

			{% endif %}
			{################################################################################################}

			proxy_redirect           off;
			proxy_set_header         Host                $host{{ args.port_suffix }};
			proxy_set_header         X-Real-IP           $remote_addr;
			proxy_set_header         X-Forwarded-For     $proxy_add_x_forwarded_for;
			proxy_set_header         X-Forwarded-Host    $server_name;
			proxy_set_header         X-Forwarded-Proto   $scheme;
			proxy_set_header         X-Forwarded-Port    {{ args.external_port }};

			{################################################################################################}
			{% if args.upgrade | bool %}

			proxy_set_header         Upgrade             $http_upgrade;
			proxy_set_header         Connection          $connection_upgrade;

			{% endif %}
			{################################################################################################}

			{################################################################################################}
			{% if args.remove_auth | bool %}

			proxy_set_header         Authorization       "";

			{% endif %}
			{################################################################################################}

			{% endif %}
			{################################################################################################}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_ssl() %}

		ssl_certificate        /etc/ssl/live/{{ var_global_main_domain }}/fullchain.pem;
		ssl_certificate_key    /etc/ssl/live/{{ var_global_main_domain }}/privkey.pem;
		include                include/options-ssl-nginx.conf;
		ssl_dhparam            include/ssl-dhparams.pem;

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_allow_origin(args) %}

		{% set var_arg_custom_headers = args.custom_headers | default([]) %}

		{% set var_default_methods = [
				'GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'
			]
		%}
		{% set var_methods = args.methods | default(var_default_methods) %}

		{% set var_allowed_headers_fixed = [
				'DNT',
				'X-CustomHeader',
				'Keep-Alive',
				'User-Agent',
				'X-Requested-With',
				'If-Modified-Since',
				'Cache-Control',
				'Content-Type'
			]
		%}
		{% set var_allowed_headers = (var_arg_custom_headers + var_allowed_headers_fixed) | unique %}

		add_header 'Access-Control-Allow-Origin' '*' always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' '{{ var_methods | join(",") }}' always;
		add_header 'Access-Control-Allow-Headers' '{{ var_allowed_headers | join(",") }}' always;

{% endmacro %}
{################################################################################################}


global
	maxconn 50000
	log /dev/log local0
	user haproxy
	group haproxy
	stats socket /run/haproxy/admin.sock user haproxy group haproxy mode 660 level admin
	nbproc 2
	nbthread 4
	cpu-map auto:1/1-4 0-3
	ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets


defaults
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    log global
    mode http
    option httplog
    maxconn 3000

{################################################################################################}
{% for port in [
		var_global_public_http_port,
		var_global_public_https_port,
		var_global_private_http_port,
		var_global_private_https_port
	]
%}

frontend http-in
	bind *:{{ port }}

	# urls
	acl host_foo hdr(host) -i www.foo.com
	acl host_bar hdr(host) -i www.bar.com
	acl host_zoo hdr(host) -i www.zoo.com

	# clusters
	use_backend foo_cluster if host_foo
	use_backend bar_cluster if host_bar
	use_backend zoo_cluster if host_zoo

	{################################################################################################}
	{% for service in var_global_services | default([]) %}

	{################################################################################################}
	{% if service.when | default(true) | bool %}

	{{ include_frontend(service) }}

	{% endif %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

{% endfor %}
{################################################################################################}


{################################################################################################}
{% macro include_service_aux(args) %}

frontend frontend_{{ args.name }}
    mode http

	{% set var_is_default = not ((service.ssl | default(false) | bool) and (args.http_port != 80)) %}
	{% set var_is_ssl = (service.ssl | default(false) | bool) and (port in [80, args.http_port, args.https_port]) %}

	{################################################################################################}
	{% if not (var_is_default | bool) %}

    bind :80

	{% endif %}
	{################################################################################################}

    bind :{{ args.http_port }}

	{################################################################################################}
	{% if var_is_ssl | bool %}

    bind :{{ args.https_port }} ssl crt /etc/ssl/live/{{ var_global_main_domain }}/fullchain.pem

    http-request redirect scheme https unless { ssl_fc }

	{% endif %}
	{################################################################################################}

	acl is_domain hdr(host) -i backend_{{ args.domain }}
	acl is_default {{ var_is_default | bool | ternary('true -m str true', 'dst_port 80') }}
	acl is_ssl_cert_path path -i -m beg /.well-known

	use_backend ssl if is_domain is_ssl_cert_path
	use_backend backend_{{ args.name }} if is_domain is_default

backend backend_{{ args.name }}
	mode http
	balance roundrobin
	option forwardfor
	server server1 ip_other_webserver:81 check

{% endmacro %}
{################################################################################################}

# backend for static webserver (ssl)
backend ssl
  server certbot {{ var_global_ssl_server_endpoint }}