{% set var_global_main_domain = params.main_domain | default([]) %}
{% set var_global_conf = params.conf | default({}) %}
{% set var_global_ports = params.ports | default({}) %}
{% set var_global_domains = params.domains | default({}) %}
{% set var_global_node_dependencies = params.dependencies | default({}) %}
{% set var_global_services = params.services | default([]) %}

{% set var_global_webservice_endpoint = var_global_conf.webservice_endpoint | default([]) %}
{% set var_global_ssl = var_global_conf.ssl | default(false) %}
{% set var_global_public_http_port = var_global_ports.public_http_port | default(false) %}
{% set var_global_public_https_port = var_global_ports.public_https_port | default(false) %}
{% set var_global_private_http_port = var_global_ports.private_http_port | default(false) %}
{% set var_global_private_https_port = var_global_ports.private_https_port | default(false) %}

{% set ns_internal_port = namespace(next=10000) %}

{################################################################################################}
{% macro include_service(args) %}

	{% set var_arg_name = args.name | default('') %}
	{% set var_arg_domain = args.domain | default('') %}
	{% set var_arg_endpoint = args.endpoint | default('') %}
	{% set var_arg_service = args.service | default('') %}
	{% set var_arg_ssl = args.ssl | default(false) %}
	{% set var_arg_upgrade = args.upgrade | default(false) %}
	{% set var_arg_private = args.private | default(false) %}
	{% set var_arg_use_basic_auth = args.use_basic_auth | default(false) %}
	{% set var_arg_remove_auth = args.remove_auth | default(false) %}
	{% set var_arg_basic_auth_file = args.basic_auth_file | default('') %}
	{% set var_arg_locations = args.locations | default([]) %}
	{% set var_arg_proxy = args.proxy | default(false) %}
	{% set var_arg_domain_name = args.domain_name | default('') %}
	{% set var_arg_dependency_name = args.dependency_name | default('') %}

	{% set var_domain = args.domain | default('') %}

	{################################################################################################}
	{% if var_domain == '' %}

	{% set var_domain =
		var_global_domains[
			var_arg_domain_name | default(var_arg_name, true)
		] | default('')
	%}

	{################################################################################################}
	{% if var_domain == '' %}

		{% set error = {} %}
		{{ error['domain.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{% set var_endpoints = args.endpoint | default('') %}

	{################################################################################################}
	{% if var_endpoints == '' %}

	{% set var_endpoints =
		var_global_node_dependencies[
			var_arg_dependency_name | default(var_arg_name, true)
		].host_list | default('')
	%}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_endpoints is string %}

	{% set var_endpoints = [var_endpoints] | reject('equalto', '') | list %}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if ((var_endpoints | length) == 0) and (var_arg_proxy | bool) %}

	{% set error = {} %}
	{{ error['endpoint.with.proxy.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% set var_resolve = true %}

	{% set var_ssl = args.ssl | default(var_global_ssl) %}
	{% set var_protocol = var_ssl | bool | ternary('https', 'http') %}
	{% set var_http_port = var_arg_private | bool | ternary('9080', '80') %}
	{% set var_https_port = var_arg_private | bool | ternary('9443', '443') %}
	{% set var_listen =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary('9443 ssl', '9080'),
			var_ssl | bool | ternary('443 ssl', '80')
		)
	%}
	{% set var_external_port =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary(var_global_private_https_port, var_global_private_http_port),
			var_ssl | bool | ternary(var_global_public_https_port, var_global_public_http_port)
		)
	%}
	{% set var_port_suffix =
		(var_external_port in ('80', '443'))
		| ternary('', ':' + var_external_port)
	%}
	{% set var_use_basic_auth =
		var_global_conf.disable_basic_auth | default(false) | bool
		| ternary(false, args.use_basic_auth | default(var_arg_private))
	%}
	{% set var_basic_auth_file =
		(var_use_basic_auth | bool)
		| ternary(args.basic_auth_file | default('auth/.htpasswd'), '')
	%}

	{% set var_location_info_list = args.locations | default('path_beg /') %}

	{% set var_location_info_list =
		(
			(var_location_info_list is iterable)
			and
			(var_location_info_list is not mapping)
			and
			(var_location_info_list is not string)
		)
		| ternary(var_location_info_list, [var_location_info_list])
	%}

	{{
		include_service_aux({
			'name': var_arg_name,
			'upgrade': var_arg_upgrade,
			'private': var_arg_private,

			'domain': var_domain,
			'endpoints': var_endpoints,
			'resolve': var_resolve,
			'ssl': var_ssl,
			'protocol': var_protocol,
			'http_port': var_http_port,
			'https_port': var_https_port,
			'listen': var_listen,
			'external_port': var_external_port,
			'port_suffix': var_port_suffix,
			'use_basic_auth': var_use_basic_auth,
			'basic_auth_file': var_basic_auth_file,

			'location_info_list': var_location_info_list
		})
	}}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_service_aux(args) %}

### [service] {{ args.name }} - frontend_ ###

{% set var_is_default = not ((service.ssl | default(false) | bool) and (args.http_port != 80)) %}
{% set var_is_ssl = service.ssl | default(false) | bool %}
{% set var_scheme = var_is_ssl | ternary('https', 'http') %}
{% set var_frontend_data = args.frontend_data | default('') %}

frontend frontend_{{ args.name }}
    mode http

	{################################################################################################}
	{% if not (var_is_default | bool) %}

    bind :80

	{% endif %}
	{################################################################################################}

    bind :{{ args.http_port }}

	{################################################################################################}
	{% if var_is_ssl | bool %}

    bind :{{ args.https_port }} ssl crt /etc/ssl/live/{{ var_global_main_domain }}/fullchain.pem

    http-request redirect scheme https unless { ssl_fc }

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.domain == var_global_main_domain %}

    redirect prefix {{ var_scheme }}://{{ args.domain }} code 301 if { hdr(host) -i www.{{ args.domain }} }

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.use_basic_auth | bool %}

	acl authusers_acl http_auth(auth_{{ args.name }})
	http-request auth realm {{ args.name }}) if !authusers_acl

	{% endif %}
	{################################################################################################}

	### [frontend - acls] {{ args.name }} ###
	acl is_domain            hdr(host) -i {{ args.domain }}
	acl is_default           {{ var_is_default | bool | ternary('true -m str true', 'dst_port 80') }}
	acl is_ssl_cert_path     path -i -m beg /.well-known

	{################################################################################################}
	{% if var_frontend_data != '' %}

	### [frontend - custom data] {{ args.name }} ###

	{################################################################################################}
	{% for line in var_frontend_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	### [frontend - backends] {{ args.name }} ###
	use_backend webservice if is_domain is_ssl_cert_path

	{################################################################################################}
	{% for location_info in args.location_info_list %}

	{% set var_location_info =
		(location_info is string)
		| ternary({ 'location': location_info }, location_info)
	%}

	{% set var_location_list = var_location_info.location | default([]) %}

	{% set var_location_list =
		(
			(var_location_list is iterable)
			and
			(var_location_list is not mapping)
			and
			(var_location_list is not string)
		)
		| ternary(var_location_list, [var_location_list])
	%}

	{################################################################################################}
	{% for location in var_location_list %}

	{% set var_default = (location == 'path_beg /') %}
	{% set var_suffix = var_default | ternary('', '_' + loop.index) %}
	{% set var_acl = var_default | ternary('', location) %}

	use_backend backend_{{ args.name }}{{ var_suffix }} if is_domain is_default {{ var_acl }}

	{% endfor %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

### [service] {{ args.name }} - backend ###

{################################################################################################}
{% for location_info in args.location_info_list %}

{% set var_location_info =
	(location_info is string)
	| ternary({ 'location': location_info }, location_info)
%}

{################################################################################################}
{% for location in var_location_list %}

{% set var_default = (location == 'path_beg /') %}
{% set var_suffix = var_default | ternary('', '_' + loop.index) %}
{% set var_backend_data = var_location_info.data | default(args.backend_data | default('')) %}
{% set var_server_args = var_location_info.server_args | default(args.server_args | default('')) %}

backend backend_{{ args.name }}{{ var_suffix }}

	{################################################################################################}
	{% if not (args.bare | default(false) | bool) %}

	mode        http
    option      forwardfor

	### [backend - headers] {{ args.name }} ###

	http-request set-header         Host                {{ args.domain }}{{ args.port_suffix }};
	http-request set-header         X-Forwarded-For     $proxy_add_x_forwarded_for;
	http-request set-header         X-Forwarded-Port    {{ args.external_port }};

	{################################################################################################}
	{% if var_backend_data != '' %}

	### [backend - custom data] {{ args.name }} ###

	{################################################################################################}
	{% for line in var_backend_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if
		((args.endpoints | length) > 0)
		and
		(not (var_location_info.no_proxy | default(false) | bool))
	%}

	### [servers] {{ args.name }} ###

	{################################################################################################}
	{% for endpoint in args.endpoints %}

	server server_{{ loop.index }} {{ endpoint }} {{ var_server_args }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

{% endfor %}
{################################################################################################}

{% endfor %}
{################################################################################################}

{################################################################################################}
{% if args.use_basic_auth | bool %}

### [service] {{ args.name }} - basic auth ###

userlist auth_{{ args.name }}

	{################################################################################################}
	{% for line in args.basic_auth_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

{% endif %}
{################################################################################################}


### [service] {{ args.name }} - end ###

{% endmacro %}
{################################################################################################}

global
	maxconn 50000
	# log /dev/log local0
	# user haproxy
	# group haproxy
	# stats socket /run/haproxy/admin.sock user haproxy group haproxy mode 660 level admin
	# nbproc 2
	# nbthread 4
	# cpu-map auto:1/1-4 0-3
	# ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
	# ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets


defaults
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    # log global
    # mode http
    # option httplog
    # maxconn 3000

{################################################################################################}
{% for service in var_global_services | default([]) %}

{################################################################################################}
{% if service.when | default(true) | bool %}

{{ include_service(service) }}

{% endif %}
{################################################################################################}

{% endfor %}
{################################################################################################}

# backend for static webserver
backend webservice
  server webservice {{ var_global_webservice_endpoint }}
