{% set var_global_main_domain = params.main_domain | default([]) %}
{% set var_global_ports = params.ports | default({}) %}
{% set var_global_conf = params.conf | default({}) %}
{% set var_global_services = params.services | default([]) %}

{% set var_global_ssl = var_global_conf.ssl | default(false) %}
{% set var_global_public_http_port = var_global_ports.public_http_port | default(false) %}
{% set var_global_public_https_port = var_global_ports.public_https_port | default(false) %}
{% set var_global_private_http_port = var_global_ports.private_http_port | default(false) %}
{% set var_global_private_https_port = var_global_ports.private_https_port | default(false) %}

{################################################################################################}
{% macro include_service(args) %}

  {% set var_arg_name = args.name | default('') %}
  {% set var_arg_domain = args.domain | default('') %}
  {% set var_arg_service = args.service | default('') %}
  {% set var_arg_ssl = args.ssl | default(false) %}
  {% set var_arg_upgrade = args.upgrade | default(false) %}
  {% set var_arg_private = args.private | default(false) %}
  {% set var_arg_use_basic_auth = args.use_basic_auth | default(false) %}
  {% set var_arg_basic_auth_file = args.basic_auth_file | default('') %}
  {% set var_arg_validate_origin = args.validate_origin | default(false) %}
  {% set var_arg_location_info_list = args.location_info_list | default([]) %}

  {% set var_ssl = args.ssl | default(var_global_ssl) %}
  {% set var_protocol = var_ssl | bool | ternary('https', 'http') %}
  {% set var_http_port = var_arg_private | bool | ternary('9080', '80') %}
  {% set var_https_port = var_arg_private | bool | ternary('9443', '443') %}
  {% set var_listen =
    var_arg_private | bool
    | ternary(
      var_ssl | bool | ternary('9443 ssl', '9080'),
      var_ssl | bool | ternary('443 ssl', '80')
    )
  %}
  {% set var_external_port =
    var_arg_private | bool
    | ternary(
      var_ssl | bool | ternary(var_global_private_https_port, var_global_private_http_port),
      var_ssl | bool | ternary(var_global_public_https_port, var_global_public_http_port)
    )
  %}
  {% set var_port_suffix =
    (var_external_port in ('80', '443'))
    | ternary('', ':' + var_external_port)
  %}
  {% set var_use_basic_auth =
    var_global_conf.disable_basic_auth | default(false) | bool
    | ternary(false, args.use_basic_auth | default(var_arg_private))
  %}
  {% set var_basic_auth_file =
    (var_use_basic_auth | bool)
    | ternary(args.basic_auth_file | default('conf/.htpasswd'), '')
  %}
  {% set var_validate_origin =
    var_global_conf.disable_origin_validation | default(false) | bool
    | ternary(false, args.validate_origin | default(var_arg_private))
  %}

  {% set var_location_info_list = args.location_info_list | default('/') %}

  {% set var_location_info_list =
    (
      (var_location_info_list is iterable)
      and
      (var_location_info_list is not mapping)
      and
      (var_location_info_list is not string)
    )
    | ternary(var_location_info_list, [var_location_info_list])
  %}

  {{ include_service_aux({
      'name': var_arg_name,
      'domain': var_arg_domain,
      'service': var_arg_service,
      'upgrade': var_arg_upgrade,
      'private': var_arg_private,

      'ssl': var_ssl,
      'protocol': var_protocol,
      'http_port': var_http_port,
      'https_port': var_https_port,
      'listen': var_listen,
      'external_port': var_external_port,
      'port_suffix': var_port_suffix,
      'use_basic_auth': var_use_basic_auth,
      'basic_auth_file': var_basic_auth_file,
      'validate_origin': var_validate_origin,

      'location_info_list': var_location_info_list
    })
  }}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_service_aux(args) %}

  ### [service] {{ args.name }} - start ###

  {################################################################################################}
  {% if args.private | bool %}
  ### Listen on port 80 to generate SSL certificates ###

  server {
    {{ include_server_info({
        'domain': args.domain,
        'listen': 80,
        'port': args.external_port,
        'ssl': false,
        'private': args.private,
        'use_basic_auth': false,
        'validate_origin': false
      })
    }}
  }

  {% endif %}
  {################################################################################################}

  {################################################################################################}
  {% if args.domain == var_global_main_domain %}
  ### Redirect ###
  ### From: www.{{ args.domain }}:{{ args.http_port }} ###
  ### To: {{ args.domain }}:{{ args.external_port }} ###

  server {
    {{ include_server_info({
        'domain': 'www.' + args.domain,
        'listen': args.http_port,
        'port': args.external_port,
        'ssl': false,
        'private': args.private,
        'use_basic_auth': false,
        'validate_origin': false
      })
    }}
    {{ include_redirect(args) }}
  }

  {% endif %}
  {################################################################################################}

  {################################################################################################}
  {% if args.ssl | bool %}
  ### Redirect ###
  ### From: {{ args.domain }}:{{ args.http_port }} ###
  ### To: {{ args.domain }}:{{ args.external_port }} ###

  server {
    {{ include_server_info({
        'domain': args.domain,
        'listen': args.http_port,
        'ssl': false,
        'private': args.private,
        'use_basic_auth': false,
        'validate_origin': false
      })
    }}
    {{ include_redirect(args) }}
  }

  {% endif %}
  {################################################################################################}

  {################################################################################################}
  {% if (args.ssl | bool) and (args.domain == var_global_main_domain) %}
  ### Redirect ###
  ### From: www.{{ args.domain }}:{{ args.listen }} ###
  ### To: {{ args.domain }}:{{ args.external_port }} ###

  server {
    {{ include_server_info({
        'domain': 'www.' + args.domain,
        'listen': args.listen,
        'ssl': args.ssl,
        'private': args.private,
        'use_basic_auth': false,
        'validate_origin': false
      })
    }}
    {{ include_redirect(args) }}
  }

  {% endif %}
  {################################################################################################}

  ### [service] {{ args.domain }} - main configuration ###

  server {
    {{ include_server_info({
        'domain': args.domain,
        'listen': args.listen,
        'ssl': args.ssl,
        'private': args.private,
        'use_basic_auth': args.use_basic_auth,
        'validate_origin': args.validate_origin
      })
    }}

    {################################################################################################}
    {% for location_info in args.location_info_list %}

    {% set var_location_info =
      (location_info is string)
      | ternary({ 'location': location_info }, location_info)
    %}

    {% set var_location_list = var_location_info.location | default([]) %}

    {% set var_location_list =
      (
        (var_location_list is iterable)
        and
        (var_location_list is not mapping)
        and
        (var_location_list is not string)
      )
      | ternary(var_location_list, [var_location_list])
    %}

    {################################################################################################}
    {% for location in var_location_list %}

    location {{ location }} {

      {################################################################################################}
      {% if var_location_info.include_cache | default(false) | bool %}

      {{ include_cache(var_location_info.cache_args | default({})) }}

      {% endif %}
      {################################################################################################}

      {################################################################################################}
      {% if var_location_info.allow_origin | default(false) | bool %}

      {{ include_allow_origin(var_location_info.allow_origin_args | default({})) }}

      {% endif %}
      {################################################################################################}

      {################################################################################################}
      {% if (var_location_info.data | default('')) == '' %}

      {{ include_proxy_location_info(args) }}

      {% else %}

      {################################################################################################}
      {% if var_location_info.proxy | default(false) | bool %}

      {{ include_proxy_location_info(args) }}

      {% endif %}
      {################################################################################################}

      {################################################################################################}
      {% for line in var_location_info.data | split('\n') %}

      {{ line }}

      {% endfor %}
      {################################################################################################}

      {% endif %}
      {################################################################################################}

    }

    {% endfor %}
    {################################################################################################}

    {% endfor %}
    {################################################################################################}

  }

  ### [service] {{ args.name }} - end ###

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_server_info(args) %}

    server_name {{ args.domain }};
    listen {{ args.listen }};
		server_tokens off;

    {################################################################################################}
    {% if args.use_basic_auth | bool %}

    auth_basic           "Administrator’s Area";
    auth_basic_user_file {{ args.basic_auth_file }};

    {% endif %}
    {################################################################################################}

    {################################################################################################}
    {% if not (args.private | bool) %}

    if ( $ip_blacklist = 1 ) {
        return 403;
    }
    if ( $ua_blacklist = 1 ) {
        return 403;
    }

    {% endif %}
    {################################################################################################}

    {################################################################################################}
    {% if args.validate_origin %}

    set $my_origin "{{ args.protocol }}://{{ args.domain }}{{ args.port_suffix }}";
    include include/validate-origin.conf;

    {% endif %}
    {################################################################################################}

    {################################################################################################}
    {% if args.ssl | bool %}

    {{ include_ssl() }}

    {% endif %}
    {################################################################################################}

    {################################################################################################}
    {% if (args.listen | string) == '80' %}

		location /.well-known/acme-challenge/ {
			root /var/www/certbot;
		}

    {% endif %}
    {################################################################################################}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_redirect(args) %}

		location / {
      return 301 {{ args.protocol }}://{{ args.domain }}{{ args.port_suffix }}$request_uri;
		}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_proxy_location_info(args) %}

      resolver {{ var_global_conf.resolver | default('127.0.0.11', true) }}{{ ''
      }} valid={{ var_global_conf.resolver_time | default('30s', true) }};

      set $var_proxy     {{ args.service }};
      proxy_pass         $var_proxy;
      proxy_redirect     off;
      proxy_set_header   Host                $host{{ args.port_suffix }};
      proxy_set_header   X-Real-IP           $remote_addr;
      proxy_set_header   X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host    $server_name;
      proxy_set_header   X-Forwarded-Proto   $scheme;
      proxy_set_header   X-Forwarded-Port    {{ args.external_port }};

      {% if args.upgrade | bool %}

      proxy_set_header   Upgrade             $http_upgrade;
      proxy_set_header   Connection          $connection_upgrade;

      {% endif %}

      {% if args.use_basic_auth | bool %}

      proxy_set_header   Authorization       "";

      {% endif %}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_ssl() %}

    ssl_certificate       /etc/ssl/live/{{ var_global_main_domain }}/fullchain.pem;
    ssl_certificate_key   /etc/ssl/live/{{ var_global_main_domain }}/privkey.pem;
    include               include/options-ssl-nginx.conf;
    ssl_dhparam           include/ssl-dhparams.pem;

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_cache(args) %}

      {% set var_proxy_cache_valid = args.proxy_cache_valid
        | default(var_global_conf.proxy_cache_valid | default('1h'))
      %}
      {% set var_expires = args.expires
        | default(var_global_conf.expires | default('1h'))
      %}

      proxy_cache                web_cache;
      proxy_cache_valid          200 301 302 {{ var_proxy_cache_valid }};
      expires                    {{ var_expires }};
      add_header Cache-Control   "public";
      add_header X-Asset         "yes";

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_allow_origin(args) %}

    {% set var_arg_custom_headers = args.custom_headers | default([]) %}

    {% set var_default_methods = [
        'GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'
      ]
    %}
    {% set var_methods = args.methods | default(var_default_methods) %}

    {% set var_allowed_headers_fixed = [
        'DNT',
        'X-CustomHeader',
        'Keep-Alive',
        'User-Agent',
        'X-Requested-With',
        'If-Modified-Since',
        'Cache-Control',
        'Content-Type'
      ]
    %}
    {% set var_allowed_headers = (var_arg_custom_headers + var_allowed_headers_fixed) | unique %}

    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' '{{ var_methods | join(",") }}' always;
    add_header 'Access-Control-Allow-Headers' '{{ var_allowed_headers | join(",") }}' always;

{% endmacro %}
{################################################################################################}

worker_processes {{ var_global_conf.worker_process | default('1', true) }};

events {
  worker_connections {{ var_global_conf.worker_connections | default('512', true) }};
}

http {
  {% set var_default_log_format =
    '$remote_addr'
    + ' $sent_http_x_user_id'
    + ' $upstream_response_time'
    + ' $status'
    + ' $remote_user'
    + ' [$time_local]'
    + ' "$host"'
    + ' "$request"'
    + ' $body_bytes_sent'
    + ' "$http_referer"'
    + ' "$http_user_agent"'
    + ' $request_time'
  %}

  log_format main '{{ var_global_conf.log_format | default(var_default_log_format, true) }}';
  access_log /dev/stdout main;
  error_log /dev/stderr;

  limit_req_zone $binary_remote_addr zone=mainlimit:10m rate={{ var_global_conf.limit_req_zone_rate | default('3r/s', true) }};
  limit_req_zone $binary_remote_addr zone=bglimit:10m rate={{ var_global_conf.bg_limit_req_zone_rate | default('3r/s', true) }};
  limit_conn_zone $binary_remote_addr zone=connlimit:10m;
  limit_conn_zone $binary_remote_addr zone=bgconnlimit:10m;
  limit_conn_zone $binary_remote_addr zone=uploadconnlimit:10m;

  proxy_cache_path /var/cache/nginx levels=1:2{{ ''
  }} keys_zone=web_cache:{{ var_global_conf.web_cache_size | default('20m', true) }}{{ ''
  }} max_size={{ var_global_conf.web_cache_max_size | default('200m', true) }}{{ ''
  }} inactive={{ var_global_conf.web_cache_inactive | default('30m', true) }};
  proxy_connect_timeout  {{ var_global_conf.proxy_connect_timeout | default('30', true) }};
  proxy_send_timeout     {{ var_global_conf.proxy_send_timeout | default('60', true) }};
  proxy_read_timeout     {{ var_global_conf.proxy_read_timeout | default('60', true) }};

  send_timeout           {{ var_global_conf.send_timeout | default('60', true) }};
  client_body_timeout    {{ var_global_conf.client_body_timeout | default('5s', true) }};
  client_header_timeout  {{ var_global_conf.client_header_timeout | default('5s', true) }};

	include include/gzip.conf;

	map_hash_max_size {{ var_global_conf.map_hash_max_size | default('1024', true) }};
	map_hash_bucket_size {{ var_global_conf.map_hash_bucket_size | default('128', true) }};

	geo $ip_blacklist {
		include /var/main/data/sync/nginx/manual/ips-blacklist.conf;
		include /var/main/data/sync/nginx/auto/ips-blacklist-auto.conf;
		default 0;
	}

	map $http_user_agent $ua_blacklist {
		include /var/main/data/sync/nginx/manual/ua-blacklist.conf;
		default 0;
	}

  map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
  }

  server {
    listen 80 default_server;
    listen 8080 default_server;
    listen 9080 default_server;
    return 444;
  }

  {################################################################################################}
  {% if var_global_ssl | bool %}

  server {
    listen 443 default_server ssl;
    listen 8443 default_server ssl;
    listen 9443 default_server ssl;

    {{ include_ssl() }}

    return 444;
  }

  {% endif %}
  {################################################################################################}

  {################################################################################################}
  {% for service in var_global_services | default([]) %}

  {################################################################################################}
  {% if service.when | default(true) | bool %}

  {{ include_service(service) }}

  {% endif %}
  {################################################################################################}

  {% endfor %}
  {################################################################################################}

}