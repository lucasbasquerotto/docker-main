#jinja2:lstrip_blocks: True
#jinja2:trim_blocks: True
worker_processes {{ params.worker_processes }};

events {
  worker_connections {{ params.worker_connections }};
}

http {
	# geo $whitelist {
	# 	include /tmp/main/manual/ips-blacklist.conf;
	# 	include /tmp/main/auto/ips-blacklist-auto.conf;
	# 	default 1;
	# }
	
	# include /tmp/main/blockips.conf;

	# limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;
	# limit_req_zone $binary_remote_addr zone=eventlimit:10m rate=2r/s;

  #   limit_conn_zone $binary_remote_addr zone=connlimit:10m;
  #   limit_conn_zone $binary_remote_addr zone=eventconnlimit:10m;
  #   limit_conn_zone $binary_remote_addr zone=uploadconnlimit:10m;

	# log_format main '$remote_addr $sent_http_x_user_id $request_time $status'
	# 	' $remote_user [$time_local] "$host" "$request"'
	# 	' $body_bytes_sent "$http_referer" "$http_user_agent"';

	# access_log /dev/stdout main; # if=$whitelist;	
	# error_log /dev/stderr;

	# proxy_connect_timeout  30;
	# proxy_send_timeout     60;
	# proxy_read_timeout     60;
	# send_timeout           60;

  # client_body_timeout    5s;
  # client_header_timeout  5s;
  {%- for subitem in params.includes %}  
  include {{ subitem }};
  {% endfor %}
  
  {%- for item in params.servers %}    
  {% if item.redirect is not defined %}
  upstream docker-{{ item.name }}-{{ item.port }} {
    server {{ item.name }}:{{ item.upstream.port | default('80', true) }};
  }
  
  {% endif %}
  server {
    server_name {{ item.host }};
    listen {{ item.port | default('80', true) }} {{ ((item.ssl | default('')) != '') | ternary('ssl', '', true) }};
    {% if (item.ssl | default('')) != '' %}

    ssl on;
    ssl_certificate /etc/ssl/{{ item.ssl }}.crt;
    ssl_certificate_key /etc/ssl/{{ item.ssl }}.key;
    {% endif %}    
    {% if item.includes is defined %}
    {%- for subitem in item.includes %}
    include {{ subitem }};
    {% endfor %}
    {% endif %}  
    {% if item.redirect is defined %}  
    return 301 {{ item.redirect.protocol }}://{{ item.redirect.host }}{{
      ((item.redirect.port != '80') and (item.redirect.port != '443'))
      | ternary(':' + item.redirect.port, '')
    }}$request_uri;
    {%- else %} 
    {%- for item_inner in item.locations %}  
    location {{ item_inner.path }} {
      {% if item_inner.includes is defined %}
      {%- for subitem in item_inner.includes %}  
      include {{ subitem }};

      {% endfor %}
      {% endif %}  
      proxy_pass         {{ item.upstream.protocol 
        | default('http', true) }}://docker-{{ item.name }}-{{ item.port }};
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }
    {% endfor %}
    {%- endif %}    
  }
  {% endfor %}
}
